[ml2_cisco_apic]

# Hostname:port list of APIC controllers
# apic_hosts = 1.1.1.1:80, 1.1.1.2:8080, 1.1.1.3:80

# Username for the APIC controller
# apic_username = user

# Password for the APIC controller
# apic_password = password

# Whether use SSl for connecting to the APIC controller or not
# apic_use_ssl = True

# How to map names to APIC: use_uuid or use_name
# apic_name_mapping = use_name

# Comma-separated list of Openstack projects for which each
# router should map to a separate VRF in ACI (the default behavior
# is to use a single VRF for all routers in a project). E.g.
# vrf_per_router_tenants = tenant1, tenant2

# File where network constraints are described (defaults to no constraints)
# network_constraints_filename = /etc/neutron/plugins/ml2/cisco_apic_network_constraints.ini

# Use integrated topology service (please check docs for applicability for your use-case)
# If set to True, the apic_topology service should be disabled
# integrated_topology_service=False

# Specify your network topology.
# This section indicates how your compute nodes are connected to the fabric's
# switches and ports. The format is as follows:
#
# [apic_switch:<swich_id_from_the_apic>]
# <compute_host>,<compute_host> = <switchport_the_host(s)_are_connected_to>
#
# You can have multiple sections, one for each switch in your fabric that is
# participating in Openstack. e.g.
#
# [apic_switch:17]
# ubuntu,ubuntu1 = 1/10
# ubuntu2,ubuntu3 = 1/11
#
# [apic_switch:18]
# ubuntu5,ubuntu6 = 1/1
# ubuntu7,ubuntu8 = 1/2

# Describe external connectivity.
# In this section you can specify the external network configuration in order
# for the plugin to be able to teach the fabric how to route the internal
# traffic to the outside world. The external connectivity configuration
# format is as follows:
#
# [apic_external_network:<externalNetworkName>]
# preexisting = True
# external_epg = <Name of L3-Out EPG>
# host_pool_cidr = 10.104.20.1/24
# Additional paramaters, only if using edge-nat
# edge_nat = True
# vlan_range = 1001:1999
#
